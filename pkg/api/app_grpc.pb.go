// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: api/proto/app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DEMClient is the client API for DEM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DEMClient interface {
	Connection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	GetInfoAboutUser(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	CheckAbsenceStatus(ctx context.Context, in *AbsenceStatusRequest, opts ...grpc.CallOption) (*AbsenceStatusResponse, error)
}

type dEMClient struct {
	cc grpc.ClientConnInterface
}

func NewDEMClient(cc grpc.ClientConnInterface) DEMClient {
	return &dEMClient{cc}
}

func (c *dEMClient) Connection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.DEM/Connection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEMClient) GetInfoAboutUser(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/api.DEM/GetInfoAboutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dEMClient) CheckAbsenceStatus(ctx context.Context, in *AbsenceStatusRequest, opts ...grpc.CallOption) (*AbsenceStatusResponse, error) {
	out := new(AbsenceStatusResponse)
	err := c.cc.Invoke(ctx, "/api.DEM/CheckAbsenceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DEMServer is the server API for DEM service.
// All implementations must embed UnimplementedDEMServer
// for forward compatibility
type DEMServer interface {
	Connection(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	GetInfoAboutUser(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	CheckAbsenceStatus(context.Context, *AbsenceStatusRequest) (*AbsenceStatusResponse, error)
	mustEmbedUnimplementedDEMServer()
}

// UnimplementedDEMServer must be embedded to have forward compatible implementations.
type UnimplementedDEMServer struct {
}

func (UnimplementedDEMServer) Connection(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connection not implemented")
}
func (UnimplementedDEMServer) GetInfoAboutUser(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoAboutUser not implemented")
}
func (UnimplementedDEMServer) CheckAbsenceStatus(context.Context, *AbsenceStatusRequest) (*AbsenceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAbsenceStatus not implemented")
}
func (UnimplementedDEMServer) mustEmbedUnimplementedDEMServer() {}

// UnsafeDEMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DEMServer will
// result in compilation errors.
type UnsafeDEMServer interface {
	mustEmbedUnimplementedDEMServer()
}

func RegisterDEMServer(s grpc.ServiceRegistrar, srv DEMServer) {
	s.RegisterService(&DEM_ServiceDesc, srv)
}

func _DEM_Connection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEMServer).Connection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DEM/Connection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEMServer).Connection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEM_GetInfoAboutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEMServer).GetInfoAboutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DEM/GetInfoAboutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEMServer).GetInfoAboutUser(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DEM_CheckAbsenceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsenceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DEMServer).CheckAbsenceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DEM/CheckAbsenceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DEMServer).CheckAbsenceStatus(ctx, req.(*AbsenceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DEM_ServiceDesc is the grpc.ServiceDesc for DEM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DEM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DEM",
	HandlerType: (*DEMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connection",
			Handler:    _DEM_Connection_Handler,
		},
		{
			MethodName: "GetInfoAboutUser",
			Handler:    _DEM_GetInfoAboutUser_Handler,
		},
		{
			MethodName: "CheckAbsenceStatus",
			Handler:    _DEM_CheckAbsenceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/app.proto",
}
